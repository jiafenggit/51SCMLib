#ifndef _1602_LCD_H_
#define _1602_LCD_H_

/******************************************
 * 这个库针对1602液晶模块开发
******************************************/
#include "general.h"                                        //先包含一些常用函数
/**************************************************************************************************
 * I    在这里我们先定义所有的指令码，这些指令码都是D7~D0位上的数据。RS和R/W控制位需要独立写入。
 * II   所有的指令码需要控制的位默认都是0，你可以通过加上对应的值来控制这个位。
 *      每个指令的介绍里都有说明。
 * III  指令码都是常量，只能把它的值赋给你所定义的变量使用。
 * IV  下面附上的是1602内部11条控制指令的表，参考这个表使用这些指令码。
 **************************************************************************************************
                                                1602液晶模块指令表
__________________________________________________________________________________________
序号  |   指令          |   RS  |   R/W |   D7  |   D6  |   D5  |   D4  |   D3  |   D2  |   D1  |   D0  |
-------------------------------------------------------------------------------------------
1       |   清显示      |  0      |  0      |  0      |  0      |  0     |  0     |  0      |  0      |  0     |  1     |
-------------------------------------------------------------------------------------------
2       |   光标返回   |    0    |    0    |    0    |    0    |    0    |    0   |    0   |    0    |    1   |    *   |
-------------------------------------------------------------------------------------------
3       |   置输入      |    0    |    0    |    0    |    0    |    0    |    0    |    0   |    1   | I/D   |   S    |
         |   模式         |          |          |          |          |          |          |         |         |         |         |
-------------------------------------------------------------------------------------------
4       |   显示开关    |    0    |    0    |    0    |    0   |    0    |    0    |    1    |    D    |   C   |   B  |
         |   控制           |         |           |          |         |          |          |          |          |        |        |
-------------------------------------------------------------------------------------------
5       |   光标或字    |    0    |    0    |    0    |    0    |    0    |    1    |  S/C  | R/L   |   *   |    *   |
         |   符移位       |          |          |          |          |          |          |          |         |        |         |
-------------------------------------------------------------------------------------------
6       |   置功能       |    0    |    0    |    0    |    0    |    1    |  DL    |    N   |    F    |    *  |    *   |
-------------------------------------------------------------------------------------------
7       |   置字符发生 |    0    |    0    |    0    |    1    |     字符发生存贮器地址                          |
         |   存贮器地址 |          |          |          |          |                                                            |
-------------------------------------------------------------------------------------------
8       |   置数据存贮 |    0    |    0    |    1     |       显示数据存贮器地址                                  |
         |   器地址        |          |          |           |                                                                      |
-------------------------------------------------------------------------------------------
9       |   读忙标志    |    0    |    1    |    BF  |      计数器地址                                                 |
         |   或地址       |    0    |    0    |    0    |    0    |    0    |    0    |    0    |    0   |    0   |    0  |
-------------------------------------------------------------------------------------------
10     |    写数到       |    1    |    0    |     要写的数据内容                                                     |
         |    CGRAM或  |          |          |                                                                                |
         |    DDRAM     |          |          |                                                                                |
-------------------------------------------------------------------------------------------
11     |    从              |    1    |    1    |     要读的数据内容                                                     |
         |    CGRAM或  |          |          |                                                                                |
         |   DDRAM读取|          |          |                                                                                |
———————————————————————————————————————
 **************************************************************************************************/

/**************************************
 *声明这些指令码
 * 这些代码将在定义文件中初始化
 **************************************/
extern const unsigned char code Clear;                      //指令1 Clear：清显示，指令码01H，光标回复到地址00H位置。
extern const unsigned char code CursorReset;            //指令2 CursorReset：光标复位，光标返回到地址0H位置。
extern const unsigned char code EntryModeSet;        //指令3 EntryModeSet：光标和显示模式设置I/D：光标移动方向，使用时指令码加2为右移，不加则为左移。
                                                                                  //显示模式设置S：屏幕上所有文字是否和光标一起左移或者右移。使用时指令码加1为有效，不加为无效。
extern const unsigned char code DisplaySwitch;         //指令4 DisplaySwitch：显示开关控制。D：控制整体显示的开与关，指令码加4为开显示，不加则为关显示。
                                                                                  //C：控制光标的开与关，指令码加2表示有光标，不加表示无光标。B：控制光标是否闪烁，加1闪烁，不加不闪烁。
extern const unsigned char code CursorDisplayMove;//指令5 CursorDisplayMove：光标或显示移位S/C：指令码加8移动显示的文字，不加移动光标。移动方向R/L：指令码加4向右移动，不加向左移动，同时光标跟随移动。
extern const unsigned char code FunctionSet;            //指令6 FunctionSet：功能设置命令DL：指令码加16为8位总线，不加为4位总线。N：指令码加8为双行显示，不加为双行显示。F：指令码加4显示5×10的点阵字符，不加为5×7的点阵字符。
extern const unsigned char code CharRAMSet;           //指令7 CharRAMSet：字符发生器RAM地址设置。加上6位字符发生存贮器地址即可。
extern const unsigned char code DDRAMSet;             //指令8 DDRAMSet：DDRAM地址设置。加上7位显示数据存贮器地址即可。
extern const unsigned char code ReadStatus;             //指令9 ReadStatus：读忙信号和光标地址。BF：为忙标志位，高电平表示忙，此时模块不能接受命令或者数据，如果为低电平表示不忙。

/****************************************************************************
 *声明函数
 *I     InitDisplay函数是默认提供的初始化函数，默认效果是静态显示字符。
 *II    WriteChar函数把字符编码写到数据端口，前两个参数提供了各个数据端口
 *      的位置。
 *IV   WriteCom函数把指令码写到数据端口，前两个参数提供了各个数据端口的
 *      位置。
 ****************************************************************************/

void InitDisplay(unsigned char Port, unsigned char* RW);
void WriteChar(unsigned char Port, unsigned char* RW, unsigned char Char);
void WriteCom(unsigned char Port, unsigned char* RW, unsigned char Com);
#endif
